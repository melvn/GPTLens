[
    {
        "function_name": "mint",
        "code": "function mint(address holder, uint value) public {\n    require(msg.sender == ico);\n    require(value > 0);\n    require(totalSupply + value <= TOKEN_LIMIT);\n    balances[holder] += value;\n    totalSupply += value;\n    Transfer(0x0, holder, value);\n}",
        "vulnerability": "Integer overflow in minting",
        "reason": "The mint function does not use SafeMath for addition, allowing integer overflows. The require statement 'totalSupply + value <= TOKEN_LIMIT' can be bypassed if totalSupply + value overflows, resulting in a wrapped value that is within the limit. Additionally, 'balances[holder] += value' and 'totalSupply += value' can overflow, leading to incorrect token balances and total supply. An attacker with control over the ico address could exploit this to mint tokens beyond the intended TOKEN_LIMIT or corrupt balances.",
        "file_name": "2018-11335.sol",
        "label": "Integer Overflow",
        "description": "GVToken Genesis Vision (GVT) is a smart contract running on Ethereum. The mint function has an integer overflow that allows minted tokens to be arbitrarily retrieved by the contract owner."
    },
    {
        "function_name": "setMigrationAgent",
        "code": "function setMigrationAgent(address _agent) external {\n    require(migrationAgent == 0);\n    require(msg.sender == migrationMaster);\n    migrationAgent = _agent;\n}",
        "vulnerability": "Privilege escalation via migration agent",
        "reason": "The setMigrationAgent function allows the migrationMaster to set a malicious migration agent contract once. If the migrationMaster's account is compromised, an attacker can set a malicious agent. Users who call migrate() will have their tokens transferred to the attacker's contract via MigrationAgent.migrateFrom, resulting in loss of funds. This centralizes trust in migrationMaster, creating a single point of failure.",
        "file_name": "2018-11335.sol",
        "label": "Integer Overflow",
        "description": "GVToken Genesis Vision (GVT) is a smart contract running on Ethereum. The mint function has an integer overflow that allows minted tokens to be arbitrarily retrieved by the contract owner."
    },
    {
        "function_name": "approve",
        "code": "function approve(address _spender, uint _value) public returns (bool) {\n    require(!isFrozen);\n    return super.approve(_spender, _value);\n}",
        "vulnerability": "ERC20 approve front-running",
        "reason": "The approve function is vulnerable to the ERC20 race condition. If a user changes the approval amount from a non-zero value to another non-zero value, a malicious spender can front-run the transaction, using the old allowance before it's reduced. This can lead to unintended allowance usage. Although increaseApproval/decreaseApproval exist, the standard approve remains risky, especially when users are unaware of the race condition.",
        "file_name": "2018-11335.sol",
        "label": "Integer Overflow",
        "description": "GVToken Genesis Vision (GVT) is a smart contract running on Ethereum. The mint function has an integer overflow that allows minted tokens to be arbitrarily retrieved by the contract owner."
    }
]