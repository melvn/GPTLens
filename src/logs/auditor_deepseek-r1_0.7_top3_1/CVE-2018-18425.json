[
    {
        "function_name": "approve",
        "code": "function approve(address _spender, uint256 _value) public returns (bool success) { if (_value != 0 && allowed[msg.sender][_spender] != 0) { return false; } allowed[msg.sender][_spender] = _value; emit Approval(msg.sender, _spender, _value); return true; }",
        "vulnerability": "Non-standard ERC20 approve behavior leading to allowance freeze",
        "reason": "The approve function prevents updating an existing non-zero allowance to another non-zero value. This violates ERC20 standards and forces users to reset their allowance to zero first, creating a race condition vulnerable to front-running attacks. Contracts/DEXs expecting standard behavior will fail when users try to adjust allowances, breaking compatibility and potentially locking funds.",
        "file_name": "2018-18425.sol",
        "label": "Token Devalue",
        "description": "The doAirdrop function of a smart contract implementation for Primeo (PEO), an Ethereum token, does not check the numerical relationship between the amount of the air drop and the token's total supply, which lets the owner of the contract issue an arbitrary amount of currency. (Increasing the total supply by using 'doAirdrop' ignores the hard cap written in the contract and devalues the token.)"
    },
    {
        "function_name": "withdraw",
        "code": "function withdraw() onlyOwner public { address myAddress = this; uint256 etherBalance = myAddress.balance; owner.transfer(etherBalance); }",
        "vulnerability": "Owner can steal all contributed ETH immediately",
        "reason": "The withdraw function allows the owner to drain all ETH from the contract at any time. Users sending ETH during token distribution have no guarantee their funds will be used as intended. This creates a direct financial scam vector where the owner can collect ETH and disappear without distributing proper token value.",
        "file_name": "2018-18425.sol",
        "label": "Token Devalue",
        "description": "The doAirdrop function of a smart contract implementation for Primeo (PEO), an Ethereum token, does not check the numerical relationship between the amount of the air drop and the token's total supply, which lets the owner of the contract issue an arbitrary amount of currency. (Increasing the total supply by using 'doAirdrop' ignores the hard cap written in the contract and devalues the token.)"
    },
    {
        "function_name": "doAirdrop",
        "code": "function doAirdrop(address _participant, uint _amount) internal { require( _amount > 0 ); require( totalDistributed < totalSupply ); balances[_participant] = balances[_participant].add(_amount); totalDistributed = totalDistributed.add(_amount); if (totalDistributed >= totalSupply) { distributionFinished = true; } emit Airdrop(_participant, _amount, balances[_participant]); emit Transfer(address(0), _participant, _amount); }",
        "vulnerability": "Unlimited token minting beyond totalSupply cap",
        "reason": "The doAirdrop function only checks if totalDistributed < totalSupply BEFORE adding new tokens. If totalDistributed is 1 unit less than totalSupply, the owner can airdrop any amount (e.g., 1B tokens), causing totalDistributed to exceed totalSupply. This breaks the token's supply cap, enabling infinite inflation and total devaluation of the token.",
        "file_name": "2018-18425.sol",
        "label": "Token Devalue",
        "description": "The doAirdrop function of a smart contract implementation for Primeo (PEO), an Ethereum token, does not check the numerical relationship between the amount of the air drop and the token's total supply, which lets the owner of the contract issue an arbitrary amount of currency. (Increasing the total supply by using 'doAirdrop' ignores the hard cap written in the contract and devalues the token.)"
    }
]