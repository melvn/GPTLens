[
    {
        "function_name": "batchTransfer",
        "code": "function batchTransfer(address[] _receivers, uint256 _value) public whenNotPaused returns (bool) { uint cnt = _receivers.length; uint256 amount = uint256(cnt) * _value; require(cnt > 0 && cnt <= 20); require(_value > 0 && balances[msg.sender] >= amount); balances[msg.sender] = balances[msg.sender].sub(amount); for (uint i = 0; i < cnt; i++) { balances[_receivers[i]] = balances[_receivers[i]].add(_value); Transfer(msg.sender, _receivers[i], _value); } return true; }",
        "vulnerability": "Integer Overflow Leading to Arbitrary Token Minting",
        "reason": "The multiplication `uint256 amount = uint256(cnt) * _value` does not use SafeMath, allowing integer overflow. If `cnt * _value` exceeds 2^256-1, `amount` wraps around to a small value. The subsequent `balances[msg.sender].sub(amount)` deducts an incorrect small amount, while each receiver gains the original large `_value`, enabling attackers to mint vast amounts of tokens from nothing.",
        "file_name": "2018-10299.sol",
        "label": "Integer Overflow",
        "description": "An integer overflow in the batchTransfer function of a smart contract implementation for Beauty Ecosystem Coin (BEC), the Ethereum ERC20 token used in the Beauty Chain economic system, allows attackers to accomplish an unauthorized increase of digital assets by providing two _receivers arguments in conjunction with a large _value argument, as exploited in the wild in April 2018, aka the \"batchOverflow\" issue."
    },
    {
        "function_name": "approve",
        "code": "function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) { allowed[msg.sender][_spender] = _value; Approval(msg.sender, _spender, _value); return true; }",
        "vulnerability": "Allowance Race Condition (Front-Running)",
        "reason": "The approve function does not mitigate the ERC20 allowance front-running attack. If a user reduces an existing allowance, a spender can front-run the transaction to use the old higher allowance before the reduction takes effect. This violates the intended allowance update and allows unauthorized token transfers.",
        "file_name": "2018-10299.sol",
        "label": "Integer Overflow",
        "description": "An integer overflow in the batchTransfer function of a smart contract implementation for Beauty Ecosystem Coin (BEC), the Ethereum ERC20 token used in the Beauty Chain economic system, allows attackers to accomplish an unauthorized increase of digital assets by providing two _receivers arguments in conjunction with a large _value argument, as exploited in the wild in April 2018, aka the \"batchOverflow\" issue."
    },
    {
        "function_name": "batchTransfer",
        "code": "function batchTransfer(address[] _receivers, uint256 _value) public whenNotPaused returns (bool) { uint cnt = _receivers.length; uint256 amount = uint256(cnt) * _value; require(cnt > 0 && cnt <= 20); require(_value > 0 && balances[msg.sender] >= amount); balances[msg.sender] = balances[msg.sender].sub(amount); for (uint i = 0; i < cnt; i++) { balances[_receivers[i]] = balances[_receivers[i]].add(_value); Transfer(msg.sender, _receivers[i], _value); } return true; }",
        "vulnerability": "Unauthorized Token Burning via Zero Address",
        "reason": "The batchTransfer function lacks a check for zero addresses in the `_receivers` array. Unlike the transfer function, which blocks sending to `address(0)`, this allows users to send tokens to the zero address via batchTransfer, enabling unauthorized token burning and violating the contract's consistency.",
        "file_name": "2018-10299.sol",
        "label": "Integer Overflow",
        "description": "An integer overflow in the batchTransfer function of a smart contract implementation for Beauty Ecosystem Coin (BEC), the Ethereum ERC20 token used in the Beauty Chain economic system, allows attackers to accomplish an unauthorized increase of digital assets by providing two _receivers arguments in conjunction with a large _value argument, as exploited in the wild in April 2018, aka the \"batchOverflow\" issue."
    }
]