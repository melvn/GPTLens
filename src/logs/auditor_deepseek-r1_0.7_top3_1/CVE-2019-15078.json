[
    {
        "function_name": "approve",
        "code": "function approve(address _spender, uint256 _value) public returns (bool success) {\n    if (_value != 0 && allowed[msg.sender][_spender] != 0) {\n        return false;\n    }\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n}",
        "vulnerability": "Non-standard ERC20 approve implementation",
        "reason": "The approve function returns false if attempting to update a non-zero allowance to another non-zero value, violating ERC20 standards. This prevents users from adjusting existing allowances without first resetting them to zero. Attackers can exploit this by front-running approval changes, causing transactions to fail or funds to be locked. Contracts expecting standard ERC20 behavior will misinterpret the false return value, leading to operational failures.",
        "file_name": "2019-15078.sol",
        "label": "Typo Constructor",
        "description": "An issue was discovered in a smart contract implementation for AIRDROPX BORN through 2019-05-29, an Ethereum token. The name of the constructor has a typo (wrong case: XBornID versus XBORNID) that allows an attacker to change the owner of the contract and obtain cryptocurrency for free."
    },
    {
        "function_name": "modifier onlyPayloadSize",
        "code": "modifier onlyPayloadSize(uint size) {\n    assert(msg.data.length >= size + 4);\n    _;\n}",
        "vulnerability": "Assertion-based gas exhaustion",
        "reason": "The onlyPayloadSize modifier uses assert() to validate transaction payload size. Unlike require(), assert() consumes all gas on failure. Attackers can craft malformed transactions (e.g., short-address attacks) to trigger this assertion, forcing victims to waste all gas. This enables gas-draining attacks and disrupts user transactions, directly benefiting attackers by increasing operational costs.",
        "file_name": "2019-15078.sol",
        "label": "Typo Constructor",
        "description": "An issue was discovered in a smart contract implementation for AIRDROPX BORN through 2019-05-29, an Ethereum token. The name of the constructor has a typo (wrong case: XBornID versus XBORNID) that allows an attacker to change the owner of the contract and obtain cryptocurrency for free."
    },
    {
        "function_name": "getTokens",
        "code": "function getTokens() payable canDistr onlyWhitelist public {\n    if (value > totalRemaining) {\n        value = totalRemaining;\n    }\n    require(value <= totalRemaining);\n    address investor = msg.sender;\n    uint256 toGive = value;\n    distr(investor, toGive);\n    if (toGive > 0) {\n        blacklist[investor] = true;\n    }\n    if (totalDistributed >= totalSupply) {\n        distributionFinished = true;\n    }\n    value = value.div(100000).mul(99999);\n}",
        "vulnerability": "Unchecked ETH deposits with owner withdrawal",
        "reason": "The getTokens function is payable but does not process or validate msg.value. Users can accidentally send ETH, which remains trapped in the contract. The owner can withdraw these funds via withdraw(), creating a risk of financial loss for users. Attackers can also social-engineer victims into sending ETH, effectively stealing funds through the owner's withdrawal capability.",
        "file_name": "2019-15078.sol",
        "label": "Typo Constructor",
        "description": "An issue was discovered in a smart contract implementation for AIRDROPX BORN through 2019-05-29, an Ethereum token. The name of the constructor has a typo (wrong case: XBornID versus XBORNID) that allows an attacker to change the owner of the contract and obtain cryptocurrency for free."
    }
]