[
    {
        "function_name": "owned",
        "code": "function owned() public { owner = msg.sender; }",
        "vulnerability": "Publicly callable ownership takeover",
        "reason": "The function 'owned()' is public and lacks access control, allowing any caller to set themselves as the owner. This is due to the incorrect naming of the constructor (should be 'Owned()' in Solidity <0.4.22). Since the MorphToken constructor sets the owner, this function should not exist, but it remains callable post-deployment, enabling anyone to reset ownership.",
        "file_name": "2019-15080.sol",
        "label": "Typo Constructor",
        "description": "An issue was discovered in a smart contract implementation for MORPH Token through 2019-06-05, an Ethereum token. A typo in the constructor of the Owned contract (which is inherited by MORPH Token) allows attackers to acquire contract ownership. A new owner can subsequently obtain MORPH Tokens for free and can perform a DoS attack."
    },
    {
        "function_name": "transferOwnership",
        "code": "function transferOwnership(address _newOwner) onlyOwner public { owner = _newOwner; }",
        "vulnerability": "Unchecked zero-address ownership transfer",
        "reason": "The function does not validate if '_newOwner' is a non-zero address. If the owner accidentally transfers ownership to address(0), the contract becomes permanently ownerless, locking all onlyOwner functions (e.g., mintTokens, blacklistAccount) and disrupting protocol governance.",
        "file_name": "2019-15080.sol",
        "label": "Typo Constructor",
        "description": "An issue was discovered in a smart contract implementation for MORPH Token through 2019-06-05, an Ethereum token. A typo in the constructor of the Owned contract (which is inherited by MORPH Token) allows attackers to acquire contract ownership. A new owner can subsequently obtain MORPH Tokens for free and can perform a DoS attack."
    },
    {
        "function_name": "approve",
        "code": "function approve(address _spender, uint256 _amount) public returns (bool success) { allowed[msg.sender][_spender] = _amount; Approval(msg.sender, _spender, _amount); return true; }",
        "vulnerability": "Front-runnable allowance approval",
        "reason": "The approve() function does not implement checks for changing allowances (e.g., requiring allowance to be zero first). Attackers can front-run a user's approval change transaction to drain funds using the old allowance before it's updated, leading to double-spending of allowances.",
        "file_name": "2019-15080.sol",
        "label": "Typo Constructor",
        "description": "An issue was discovered in a smart contract implementation for MORPH Token through 2019-06-05, an Ethereum token. A typo in the constructor of the Owned contract (which is inherited by MORPH Token) allows attackers to acquire contract ownership. A new owner can subsequently obtain MORPH Tokens for free and can perform a DoS attack."
    }
]