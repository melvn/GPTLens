[
    {
        "function_name": "setOwner",
        "code": "function setOwner(address _owner) returns (bool success) { owner = _owner; return true; }",
        "vulnerability": "Unrestricted Ownership Transfer",
        "reason": "The setOwner function lacks the onlyOwner modifier, allowing any address to arbitrarily change the contract owner. This enables an attacker to immediately take full control of the contract, including privileged functions like unlockToken and uploadBalances, leading to fund theft or contract destruction.",
        "file_name": "2018-10705.sol",
        "label": "Access Control",
        "description": "The Owned smart contract implementation for Aurora DAO (AURA), an Ethereum ERC20 token, allows attackers to acquire contract ownership because the setOwner function is declared as public. An attacker can then conduct a lockBalances() denial of service attack."
    },
    {
        "function_name": "uploadBalances",
        "code": "function uploadBalances(address[] recipients, uint256[] balances) onlyOwner { require(!balancesUploaded); uint256 sum = 0; for (uint256 i = 0; i < recipients.length; i++) { balanceOf[recipients[i]] = safeAdd(balanceOf[recipients[i]], balances[i]); sum = safeAdd(sum, balances[i]); } balanceOf[owner] = safeSub(balanceOf[owner], sum); }",
        "vulnerability": "Array Length Mismatch Token Loss",
        "reason": "The uploadBalances function does not enforce equal lengths for recipients and balances arrays. If recipients.length > balances.length, balances[i] returns 0 beyond the balances array's end, causing the owner's balance to be reduced by the sum of the valid balances while recipients receive incorrect (often zero) amounts. This permanently burns the sum from the owner's balance, leading to irreversible token loss.",
        "file_name": "2018-10705.sol",
        "label": "Access Control",
        "description": "The Owned smart contract implementation for Aurora DAO (AURA), an Ethereum ERC20 token, allows attackers to acquire contract ownership because the setOwner function is declared as public. An attacker can then conduct a lockBalances() denial of service attack."
    },
    {
        "function_name": "approve",
        "code": "function approve(address _spender, uint256 _value) public returns (bool success) { require(!locked); allowance[msg.sender][_spender] = _value; return true; }",
        "vulnerability": "Allowance Race Condition",
        "reason": "The approve function does not mitigate the ERC20 allowance front-running attack. If a user reduces their approval for a spender, the spender can front-run the transaction to use the old allowance before the reduction. This allows attackers to drain funds up to the previous higher allowance, especially impactful once the contract is unlocked.",
        "file_name": "2018-10705.sol",
        "label": "Access Control",
        "description": "The Owned smart contract implementation for Aurora DAO (AURA), an Ethereum ERC20 token, allows attackers to acquire contract ownership because the setOwner function is declared as public. An attacker can then conduct a lockBalances() denial of service attack."
    }
]