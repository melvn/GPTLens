[
    {
        "function_name": "multiTransfer",
        "code": "function multiTransfer(address[] _addresses, uint[] _amounts) public returns (bool success) { require(_addresses.length <= 100 && _addresses.length == _amounts.length); uint totalAmount; for (uint a = 0; a < _amounts.length; a++) { totalAmount += _amounts[a]; } require(totalAmount > 0 && balances[msg.sender] >= totalAmount); balances[msg.sender] -= totalAmount; for (uint b = 0; b < _addresses.length; b++) { if (_amounts[b] > 0) { balances[_addresses[b]] += _amounts[b]; Transfer(msg.sender, _addresses[b], _amounts[b]); } } return true; }",
        "vulnerability": "Integer Overflow in Token Transfer",
        "reason": "The `multiTransfer` function calculates `totalAmount` by summing all `_amounts` without overflow checks. Using Solidity 0.4.18 (which lacks automatic overflow protection), an attacker can craft `_amounts` values that overflow `totalAmount`, bypassing the `balances[msg.sender] >= totalAmount` check. For example, if the sum overflows to a small value, the attacker's balance is reduced minimally, but recipients receive large amounts, effectively stealing tokens from the contract.",
        "file_name": "2018-13836.sol",
        "label": "Integer Overflow",
        "description": "An integer overflow vulnerability exists in the function multiTransfer of Rocket Coin (XRC), an Ethereum token smart contract. An attacker could use it to set any user's balance."
    },
    {
        "function_name": "approve",
        "code": "function approve(address _spender, uint256 _amount) public returns (bool success) { allowed[msg.sender][_spender] = _amount; Approval(msg.sender, _spender, _amount); return true; }",
        "vulnerability": "Front-Runnable Approval",
        "reason": "The `approve` function allows a user to set a new allowance without first resetting it to zero. An attacker can front-run a user's approval reduction (e.g., from 5 to 3) by observing the transaction in the mempool and executing a `transferFrom` with the old allowance (5) before it is reduced. This enables double-spending of the originally approved amount, violating the user's intended authorization limits.",
        "file_name": "2018-13836.sol",
        "label": "Integer Overflow",
        "description": "An integer overflow vulnerability exists in the function multiTransfer of Rocket Coin (XRC), an Ethereum token smart contract. An attacker could use it to set any user's balance."
    },
    {
        "function_name": "fallback function",
        "code": "function() public payable { require(airDropStatus && balances[owner] >= airDropAmount && !participants[msg.sender] && tx.gasprice >= airDropGasPrice); balances[owner] -= airDropAmount; balances[msg.sender] += airDropAmount; Transfer(owner, msg.sender, airDropAmount); participants[msg.sender] = true; }",
        "vulnerability": "Trapped ETH with No Handling",
        "reason": "The fallback function is `payable` but does not process incoming ETH. Users may mistakenly send ETH (e.g., assuming it's required for the airdrop), which becomes permanently locked in the contract. While the airdrop itself does not require ETH, the contract's design misleads users into sending funds that are never used or returned, resulting in accidental financial loss.",
        "file_name": "2018-13836.sol",
        "label": "Integer Overflow",
        "description": "An integer overflow vulnerability exists in the function multiTransfer of Rocket Coin (XRC), an Ethereum token smart contract. An attacker could use it to set any user's balance."
    }
]