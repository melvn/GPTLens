[
    {
        "function_name": "transferFrom",
        "code": "function transferFrom(address from, address to, uint value) returns (bool success) { if (frozenAccount[msg.sender]) return false; if(balances[from] < value) return false; if( allowed[from][msg.sender] >= value ) return false; if(balances[to] + value < balances[to]) return false; balances[from] -= value; allowed[from][msg.sender] -= value; balances[to] += value; Transfer(from, to, value); return true; }",
        "vulnerability": "Inverted Allowance Check & Underflow",
        "reason": "The condition `if( allowed[from][msg.sender] >= value ) return false;` is inverted. This allows transfers when the allowance is **insufficient** (allowed < value) instead of enforcing it. Furthermore, when `allowed[from][msg.sender]` is less than `value`, the line `allowed[from][msg.sender] -= value;` underflows (due to Solidity 0.4.2's lack of overflow checks), setting the allowance to a massive value (2^256 - X). Attackers can exploit this to gain infinite approval after one underflow, enabling unlimited token transfers from the victim's account.",
        "file_name": "2018-12025.sol",
        "label": "Wrong Logic",
        "description": "The transferFrom function of a smart contract implementation for FuturXE (FXE), an Ethereum ERC20 token, allows attackers to accomplish an unauthorized transfer of digital assets because of a logic error. The developer messed up with the boolean judgment - if the input value is smaller than or equal to allowed value, the transfer session would stop execution by returning false. This makes no sense, because the transferFrom() function should require the transferring value to not exceed the allowed value in the first place. Suppose this function asks for the allowed value to be smaller than the input. Then, the attacker could easily ignore the allowance: after this condition, the `allowed[from][msg.sender] -= value;` would cause an underflow because the allowed part is smaller than the value. The attacker could transfer any amount of FuturXe tokens of any accounts to an appointed account (the `_to` address) because the allowed value is initialized to 0, and the attacker could bypass this restriction even without the victim's private key."
    },
    {
        "function_name": "transferFrom",
        "code": "function transferFrom(address from, address to, uint value) returns (bool success) { if (frozenAccount[msg.sender]) return false; if(balances[from] < value) return false; if( allowed[from][msg.sender] >= value ) return false; if(balances[to] + value < balances[to]) return false; balances[from] -= value; allowed[from][msg.sender] -= value; balances[to] += value; Transfer(from, to, value); return true; }",
        "vulnerability": "Incorrect Frozen Account Check",
        "reason": "The function checks `frozenAccount[msg.sender]` (spender's status) instead of `frozenAccount[from]` (token owner's status). A frozen account (from) can still have its tokens transferred via an approved spender (msg.sender) as long as the spender is not frozen. This violates the intended freezing logic, allowing attackers to bypass account freezes by using approved addresses.",
        "file_name": "2018-12025.sol",
        "label": "Wrong Logic",
        "description": "The transferFrom function of a smart contract implementation for FuturXE (FXE), an Ethereum ERC20 token, allows attackers to accomplish an unauthorized transfer of digital assets because of a logic error. The developer messed up with the boolean judgment - if the input value is smaller than or equal to allowed value, the transfer session would stop execution by returning false. This makes no sense, because the transferFrom() function should require the transferring value to not exceed the allowed value in the first place. Suppose this function asks for the allowed value to be smaller than the input. Then, the attacker could easily ignore the allowance: after this condition, the `allowed[from][msg.sender] -= value;` would cause an underflow because the allowed part is smaller than the value. The attacker could transfer any amount of FuturXe tokens of any accounts to an appointed account (the `_to` address) because the allowed value is initialized to 0, and the attacker could bypass this restriction even without the victim's private key."
    },
    {
        "function_name": "approve",
        "code": "function approve(address _spender, uint256 _amount) returns (bool success) { allowed[msg.sender][_spender] = _amount; Approval(msg.sender, _spender, _amount); return true; }",
        "vulnerability": "Unsafe ERC20 Approve",
        "reason": "The `approve` function does not include a check for the front-running race condition. If a user changes their approval from a non-zero value to another non-zero value, an attacker can front-run the transaction to use the old approval before it is reset. While this is a known ERC20 design flaw, its presence here allows attackers to steal funds if users naively adjust approvals without first setting them to zero.",
        "file_name": "2018-12025.sol",
        "label": "Wrong Logic",
        "description": "The transferFrom function of a smart contract implementation for FuturXE (FXE), an Ethereum ERC20 token, allows attackers to accomplish an unauthorized transfer of digital assets because of a logic error. The developer messed up with the boolean judgment - if the input value is smaller than or equal to allowed value, the transfer session would stop execution by returning false. This makes no sense, because the transferFrom() function should require the transferring value to not exceed the allowed value in the first place. Suppose this function asks for the allowed value to be smaller than the input. Then, the attacker could easily ignore the allowance: after this condition, the `allowed[from][msg.sender] -= value;` would cause an underflow because the allowed part is smaller than the value. The attacker could transfer any amount of FuturXe tokens of any accounts to an appointed account (the `_to` address) because the allowed value is initialized to 0, and the attacker could bypass this restriction even without the victim's private key."
    }
]