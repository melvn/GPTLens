[
    {
        "function_name": "UBSexToken",
        "code": "function UBSexToken() { owner = msg.sender; totalSupply = 1.9 * 10 ** 26; balances[owner] = totalSupply; }",
        "vulnerability": "Insecure Initialization via Public Function",
        "reason": "The function UBSexToken() is not a constructor (mismatched contract name) and is publicly callable. Attackers can invoke it post-deployment to reset the owner, totalSupply, and balances, effectively hijacking the contract. This allows an attacker to mint the entire token supply to themselves and gain ownership, leading to total control over the contract.",
        "file_name": "2018-19830.sol",
        "label": "Access Control",
        "description": "The UBSexToken() function of a smart contract implementation for Business Alliance Financial Circle (BAFC), an tradable Ethereum ERC20 token, allows attackers to change the owner of the contract, because the function is public (by default) and does not check the caller's identity."
    },
    {
        "function_name": "transfer",
        "code": "function transfer(address _to, uint _value) onlyPayloadSize(2 * 32) unFrozenAccount onlyTransferable { if (frozenAccount[_to]) { InvalidAccount(_to, \"The receiver account is frozen\"); } else { balances[msg.sender] = balances[msg.sender].sub(_value); balances[_to] = balances[_to].add(_value); Transfer(msg.sender, _to, _value); } }",
        "vulnerability": "Missing ERC20 Return Value",
        "reason": "The transfer function does not return a boolean as required by the ERC20 standard. Contracts/Wallets expecting ERC20 compliance will treat the missing return value as a failure, causing transactions to revert. This breaks interoperability with exchanges, DeFi protocols, and other ERC20-reliant systems.",
        "file_name": "2018-19830.sol",
        "label": "Access Control",
        "description": "The UBSexToken() function of a smart contract implementation for Business Alliance Financial Circle (BAFC), an tradable Ethereum ERC20 token, allows attackers to change the owner of the contract, because the function is public (by default) and does not check the caller's identity."
    },
    {
        "function_name": "approve",
        "code": "function approve(address _spender, uint _value) unFrozenAccount { if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) throw; allowed[msg.sender][_spender] = _value; Approval(msg.sender, _spender, _value); }",
        "vulnerability": "Unsafe Allowance Update",
        "reason": "The approve function throws when updating a non-zero allowance to another non-zero value. This forces users to reset allowance to zero first, creating a race condition where a spender can use the old allowance before it is updated. Attackers can front-run the second approval transaction to drain funds using the outdated allowance.",
        "file_name": "2018-19830.sol",
        "label": "Access Control",
        "description": "The UBSexToken() function of a smart contract implementation for Business Alliance Financial Circle (BAFC), an tradable Ethereum ERC20 token, allows attackers to change the owner of the contract, because the function is public (by default) and does not check the caller's identity."
    }
]