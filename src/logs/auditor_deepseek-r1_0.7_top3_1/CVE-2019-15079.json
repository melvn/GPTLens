[
    {
        "function_name": "EAI_TokenERC20",
        "code": "function EAI_TokenERC20( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",
        "vulnerability": "Reinitialization Attack",
        "reason": "The constructor is incorrectly named (EAI_TokenERC20 vs. contract name EAI_TokenERC), making it a public function callable by anyone. Attackers can reinitialize the contract, resetting totalSupply, name, symbol, and assigning themselves the entire token supply. This allows them to mint unlimited tokens, overwrite the contract's state, and effectively hijack control.",
        "file_name": "2019-15079.sol",
        "label": "Typo Constructor",
        "description": "A typo exists in the constructor of a smart contract implementation for EAI through 2019-06-05, an Ethereum token. This vulnerability could be used by an attacker to acquire EAI tokens for free."
    },
    {
        "function_name": "_transfer",
        "code": "function _transfer(address _from, address _to, uint _value) internal { require(_to != 0x0); require(balanceOf[_from] >= _value); require(balanceOf[_to] + _value >= balanceOf[_to]); uint previousBalances = balanceOf[_from] + balanceOf[_to]; balanceOf[_from] -= _value; balanceOf[_to] += _value; emit Transfer(_from, _to, _value); assert(balanceOf[_from] + balanceOf[_to] == previousBalances); }",
        "vulnerability": "Arithmetic Over/Underflow Risk",
        "reason": "While manual overflow checks exist, the contract uses Solidity 0.4.16, which lacks native overflow protection. If edge cases bypass the require(balanceOf[_to] + _value >= balanceOf[_to]) check (e.g., via unexpected overflow wrapping), token balances could be corrupted. The assert may fail to detect overflow in previousBalances if the initial sum exceeds uint256 max, leading to inconsistent states.",
        "file_name": "2019-15079.sol",
        "label": "Typo Constructor",
        "description": "A typo exists in the constructor of a smart contract implementation for EAI through 2019-06-05, an Ethereum token. This vulnerability could be used by an attacker to acquire EAI tokens for free."
    },
    {
        "function_name": "transferFrom",
        "code": "function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) { require(_value <= allowance[_from][msg.sender]); allowance[_from][msg.sender] -= _value; _transfer(_from, _to, _value); return true; }",
        "vulnerability": "Front-Running Allowance Race",
        "reason": "The transferFrom function decrements the allowance before performing the transfer. If the transfer fails (e.g., due to a later revert in _transfer), the allowance is permanently reduced. Attackers could exploit this by front-running transactions to cause intentional failures, effectively locking users' allowances and disrupting expected behavior.",
        "file_name": "2019-15079.sol",
        "label": "Typo Constructor",
        "description": "A typo exists in the constructor of a smart contract implementation for EAI through 2019-06-05, an Ethereum token. This vulnerability could be used by an attacker to acquire EAI tokens for free."
    }
]